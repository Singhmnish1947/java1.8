package com.finastra.iso8583.atm;


import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.Socket;
import java.net.UnknownHostException;

public class TCPPumper_New {

	public static void main(String[] args) throws UnknownHostException, IOException {
		//Socket clientSocket = new Socket("localhost", 5150);
		
		Socket clientSocket = new Socket("10.215.135.233",8050);
		DataOutputStream outToServer = new DataOutputStream(clientSocket.getOutputStream());

		// Network Message
		// String Header= asciiToHex("00411804");
		// String BitMap ="0030010000000000";
		// String fieldData= asciiToHex("123456200521144832831");

		// Balance Enquiry with all the fields
		// String Header= asciiToHex("03381100");
		// String BitMap ="FCF640010CA1E4000000000014000000";
		// String fieldData=
		// asciiToHex("1610121000000409003100000000000133000000000133000000000133000000000000000000345678200526144832221220052660111111000589394BLQ00000270112345600000001ATM
		// BANISTMO>ATM BANISTMO / ATM
		// /PanamPA0520010011002003702026007BancNet0250011031010REF0000004840840840018001012000000001100111100058939415010201PTY003600");

		 //Balance Enquiry with only Mandatory Fields
/*		 String Header= asciiToHex("02311100");
		 String BitMap ="B49000010881A4000000000014000000";
		 String fieldData=asciiToHex("390000000000013300000000013300000000002005221448321111000589394BLQM00002208000000010520010011002003702026007BancNet0250011031010REF00000038408400180010120000000011001111000589394150202010PTY00100");
		
	*/	
	/*	 String Header= asciiToHex("02311100");
		 String BitMap ="B49000010881A4000000000014000000";
		 String fieldData=asciiToHex("310000000000013300000000013300000000002005221448321111000589394BLQM00002205000000010520010011002003702026007BancNet0250011031010REF00000039789780180010120000000011001111000589394150202010PTY00100");
		
*/
		// CW with only Mandatory fields
/*		 String Header= asciiToHex("01941420");
		 String BitMap ="B49000010881A0000000000014000000";
		 String fieldData=
		 asciiToHex("010000000000013300000000013300000000002006041511321111000589394CWM000002717000000010520010011002003700026007BancNet0250011031010REF00000069789781111000589394150202010PTY00100");
*/
//		
//		 String Header= asciiToHex("01901100");
//		 String BitMap ="B49000010881A0000000000014000000";
//		 String fieldData=
//		 asciiToHex("000000000000013300000000013300000000002006041511321111000589394POS0000027170000000904800100110020037740260039990250011031010REF00000069789781111000589394150202010PTY00100");

		// FT with all the fields
		// String Header= asciiToHex("03551420");
		// String BitMap ="FCF640010CA1E4000000000016000000";
		// String fieldData=
		// asciiToHex("1610121000000409004010000000000133000000000133000000000133000000000000000000345678200521144832221220052160111111000589394FTR00000270312345600000001ATM
		// BANISTMO>ATM BANISTMO / ATM
		// /PanamPA0520010011002003703026007BancNet0250011031010REF0000003840840840018001012000000001100111100058939415010201PTY00360615010201PTY003600");
		//
		// FT with only Mandatory fields
		// String Header= asciiToHex("02271420");
		// String BitMap ="B49000010881A0000000000016000000";
		// String fieldData=
		// asciiToHex("400000000000012300000000011300000000002005221448321111000589394FTM000002703000000010520010011002003700026007BancNet0250011031010REF0000003840840111100058939415010201PTY00360615010201PTY003600");

		// FT with only Mandatory fields checkin reversal
		// String Header= asciiToHex("02481420");
		// String BitMap ="B49000010881A4000000000016000000";
		// String fieldData=
		// asciiToHex("400000000000012300000000011300000000002005221448321111000589394FTM000002705000000010520010011002003700026007BancNet0250011031010REF0000003840840018001012000000001200111100058939415010201PTY00360615010201PTY003600");

		// CW with All the fields
/*		String Header = asciiToHex("03201100");
		String BitMap = "FCF640010CA1E4000000000014000000";
		String fieldData = asciiToHex("1610121000000409000110000000000133000000000133000000000133000000000000000000345678201123144832221220112360111111000589394CWD00000270612345600000001ATM BANISTMO>ATM BANISTMO / ATM /PanamPA049001001100200370002600490010250011031010REF00000048408408400180010120000000011001111000589394150202010PTY00100");
*/
		
		//CW with  FBE 2020.8 with all fields
        String Header= asciiToHex("04821100");
        String BitMap ="FCF6440108E1E4000000000014000000";
        String fieldData= asciiToHex("1656387200000051260121000000000011000000000011190000000016000000000000000000000323201209144442271220120960116011016540401111000589395CWBPC201290400000001840436505185116105.Cecil.St>Singapore................SG159001001200200370002500400050260047016027004099902800370203000266031014100000773093820340141000007730938203601420200630144443039012200630144442065012000000000321608608608058001012000000000400006016C0000000000008400110120000000150000470141460810000000077");
        
		
		
/*		String Header= asciiToHex("03341100");

		String BitMap ="FCF6400108E1E4000000000014000000";

		String fieldData= asciiToHex("1800000000000001200000000001200000000001200000001300000013345678200526144832221220052660111111000589394POS010TEST830000000911000589394 ATM BANISTMO>ATM BANISTMO / ATM /PanamPA0520010011002003774026007BancNet0250011031010REF00000049788409780180010120000000010001111000589394150202010PTY00100");

		String PrimaryAccNo = asciiToHex("161012100000040901");
*/		
		String requestMsg1100 = Header + BitMap+ fieldData;

		byte[] requestMessage1100Array = hexStringToByteArray(requestMsg1100);

		outToServer.write(requestMessage1100Array);

		InputStream stream = clientSocket.getInputStream();

		byte[] data = new byte[350];

		int count = stream.read(data);

		System.out.println(count);
		System.out.println(byteArrayToHex(data));
		clientSocket.close();
	}

	public static String byteArrayToHex(byte[] A) {
		StringBuilder sb = new StringBuilder(A.length * 2);
		for (byte B : A)
			sb.append(String.format("%02X", B));
		return sb.toString();
	}

	public static byte[] hexStringToByteArray(String s) {
		int len = s.length();
		byte[] data = new byte[len / 2];
		for (int i = 0; i < len; i += 2) {
			data[(i / 2)] = ((byte) ((Character.digit(s.charAt(i), 16) << 4) + Character.digit(s.charAt(i + 1), 16)));
		}
		return data;

	}

	public static String asciiToHex(String ascii) {
		char[] ch = ascii.toCharArray();
		StringBuilder hex = new StringBuilder();

		for (char c : ch) {
			int i = (int) c;
			hex.append(Integer.toHexString(i).toUpperCase());
		}
		String hexConverted = String.valueOf(hex);
		return hexConverted;
	}
}
