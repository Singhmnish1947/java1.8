package com.finastra.iso8583.atm.decoders;

import org.jboss.netty.buffer.ChannelBuffer;
import org.jboss.netty.buffer.ChannelBuffers;
import org.jboss.netty.channel.ChannelUpstreamHandler;
import org.jboss.netty.handler.codec.embedder.DecoderEmbedder;
import org.jboss.netty.util.CharsetUtil;
import org.junit.Assert;
import org.junit.Test;

public class TestSmartVistaDecoder
  
{
  private int lengthFieldOffset = "".length();
  private int lengthFieldLength = 4;
  private int lengthAdjustment = this.lengthFieldLength;
  private int initialBytesToStrip = 0;
  private int mtiFieldLength = 4;
  private int primaryBitMapOffset = this.lengthFieldOffset + this.lengthFieldLength + this.mtiFieldLength;
  private int primaryBitMapLength = 8;
  private int secondaryBitMapLength = 8;
  private int maxFrameLength = 16384;
  String requestMsg
  String requestMsg
  String requestMsg
  String requestMsg
  String requestMsg1804Example1 = "30303333313830340030010000000000323332333336313230323133313234343133383031";
  String requestMsg1804Example2 = "30303333313830340030010000000000323332333336313230323133313234343133383032";
  String requestMsg1804Example3 = "30303333313830340030010000000000323332333336313230323133313234343133383331";
  private byte[] requestMessage1100Array = hexStringToByteArray(this.requestMsg1100);
  private byte[] requestMessage1200Array = hexStringToByteArray(this.requestMsg1200);
  private byte[] requestMessage1220Array = hexStringToByteArray(this.requestMsg1220);
  private byte[] requestMessage1420Array = hexStringToByteArray(this.requestMsg1420);
  private byte[] requestMessage1804ArrayExample1 = hexStringToByteArray(this.requestMsg1804Example1);
  private byte[] requestMessage1804ArrayExample2 = hexStringToByteArray(this.requestMsg1804Example2);
  private byte[] requestMessage1804ArrayExample3 = hexStringToByteArray(this.requestMsg1804Example3);
  String decodedMsg1100 = "04201100F47405C1AEE1A0000100000E14000000164407830017770679010000000000001000000000001000610000007836541201131702131311511101913146100150360110644078206RTPSID374407830017770679=13111211019483600000201317783654681213000ATM0255 00680255       40NANYUKIBR001>NANYUKI                  KE009AO50O222 KESKES077L01071AC1000AL100210AM10041000CY1003KESLID00518699OTY00312ZRTY00311ZTYP00312Z11Bush_Inside089750002018ROWN0118523578365411Bush_Inside0210";
  String decodedMsg1200 = "04461200F67405D9AEE1A0000100000E140000001644078300177706790100000000000010000000000010000113171320610000007836581201131713201311511101913146200150360111201131010644078206RTPSID374407830017770679=13111211019483600000201317783658891553000ATM0255 00680255       40NANYUKIBR001>NANYUKI                  KE009AO50O222 KESKES084T01078AC1000ACT001CAM00041000AM10041000CY0003KESCY1003KESOTY003207RTY003227TYP00320711Bush_Inside089750002018ROWN0118523578365811Bush_Inside0210";
  String decodedMsg1220 = "04071220F67405D98EE1A0000100000E140000001644078300177706790100000000000010000000000010000113171448610000007836591201131714481311511101913146200150360111201131010644078206RTPSID201317783659403155000ATM0255 00680255       40NANYUKIBR001>NANYUKI                  KE009AO50O222 KESKES084T01078AC1000ACT001CAM00041000AM10041000CY0003KESCY1003KESOTY003207RTY003227TYP00320711Bush_Inside089750002018ROWN0118523578365911Bush_Inside0210";
  String decodedMsg1420 = "04601420F47405C58EE1A1000100000E140000001644078300177706790100000000000010000000000010006100000078365612011317113013115111019131464004001601124        1000        10000644078206RTPSID201317783654681213400ATM0255 00680255       40NANYUKIBR001>NANYUKI                  KE009AO50O222 KESKES30110078365412011317021306440782100L01071AC1000AL100210AM10041000CY1003KESLID00518701OTY00312ZRTY00312ZTYP00311ZORG017MID0118523578365411Bush_Inside0642800018ROWN0118523578365611Bush_Inside0210";
  String decodedMsg1804example1 = "003318040030010000000000232336120213124413801";
  String decodedMsg1804example2 = "003318040030010000000000232336120213124413802";
  String decodedMsg1804example3 = "003318040030010000000000232336120213124413831";
  
  @Test
  public void testSmartVistaDecodersForRequestMsg1100()
  {
    smartVistaDecoder(this.requestMessage1100Array, this.decodedMsg1100);
  }
  
  @Test
  public void testSmartVistaDecodersForRequestMsg1200()
  {
    smartVistaDecoder(this.requestMessage1200Array, this.decodedMsg1200);
  }
  
  @Test
  public void testSmartVistaFrameDecodersForRequestMsg1220()
  {
    smartVistaDecoder(this.requestMessage1220Array, this.decodedMsg1220);
  }
  
  @Test
  public void testSmartVistaFrameDecodersForRequestMsg1420()
  {
    smartVistaDecoder(this.requestMessage1420Array, this.decodedMsg1420);
  }
  
  @Test
  public void testSmartVistaFrameDecodersForRequestMsg1804Example1()
  {
    smartVistaDecoder(this.requestMessage1804ArrayExample1, this.decodedMsg1804example1);
  }
  
  @Test
  public void testSmartVistaFrameDecodersForRequestMsg1804Example2()
  {
    smartVistaDecoder(this.requestMessage1804ArrayExample2, this.decodedMsg1804example2);
  }
  
  @Test
  public void testSmartVistaFrameDecodersForRequestMsg1804Example3()
  {
    smartVistaDecoder(this.requestMessage1804ArrayExample3, this.decodedMsg1804example3);
  }
  
  @SuppressWarnings({ "rawtypes", "unchecked" })
private void smartVistaDecoder(byte[] requestMessageArray, String decodedMessage)
  {
    ChannelBuffer msgData = ChannelBuffers.copiedBuffer(requestMessageArray);
    DecoderEmbedder<String> embedder = new DecoderEmbedder(new ChannelUpstreamHandler[] { new SmartVistaFrameDecoder(this.maxFrameLength, this.lengthFieldOffset, this.lengthFieldLength, this.lengthAdjustment, this.initialBytesToStrip, CharsetUtil.US_ASCII), new SmartVistaStringDecoder(this.primaryBitMapOffset, this.primaryBitMapLength, this.secondaryBitMapLength, CharsetUtil.US_ASCII) });
    
    embedder.offer(msgData);
    
    String decoded = embedder.poll();
    Assert.assertEquals(decodedMessage, decoded);
  }
  
  public static byte[] hexStringToByteArray(String s)
  {
    int len = s.length();
    byte[] data = new byte[len / 2];
    for (int i = 0; i < len; i += 2) {
      data[(i / 2)] = ((byte)((Character.digit(s.charAt(i), 16) << 4) + Character.digit(s.charAt(i + 1), 16)));
    }
    return data;
  }
}
