/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.finastra.api.atm.v1.controller;

import java.util.UUID;

import javax.validation.Valid;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.finastra.api.atm.v1.model.CashWithdrawalRequest;
import com.finastra.api.atm.v1.model.CashWithdrawalResponse;
import com.finastra.api.atm.v1.model.Error;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import io.swagger.annotations.Authorization;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-09-26T12:19:00.869+05:30")

@Api(value = "withdrawals", description = "the withdrawals API")
public interface WithdrawalsApi {

	@ApiOperation(value = "atmCashWithdrawal", nickname = "atmCashWithdrawalPost", notes = "__Background__  A cash withdrawal is removing funds from a bank account. Account can be  savings, Current or pension. Customer can withdraw money in ATM machines, which is called ATM cash withdrawal. In this process customer may or may not use card.While customer is withdrawing, in the background ATM machine will be communicating with cardholder bank via SWITCH, Card networks and Forwarding institution (if required).The API is a way achieve the this integration from external network (ATM SWITCH/Card Management application) to core banking solution.  __Solution Summary & Approach__  Transaction event identified based on the three parameters, Processing code (processingCodeTransactionType), Message Type Identifier (messageTypeIdentifier) and Function Code (functionCode)  * Online ->   Processing code -01, Message Type identifier- 1200, Function code- 200 * Advice (Offline)->   Processing code- 01, Message Type identifier- 1220, Function code- 200 * Repeat ->   Processing code- 01, Message Type identifier- 1201, Function code- 200 * RepeatAdvice-> Processing code- 01, Message Type identifier- 1221, Function code- 200 * Replacement-> Processing code- 01, Message Type identifier- 1200, Function code- 202 * Repeat Replacement-> Processing code- 01, Message Type identifier- 1201, Function code- 202 * Reversal-> Processing code- 01, Message Type identifier- 1420, Function code- 200 * RepeatReversal-> Processing code- 01, Message Type identifier- 1421, Function code- 200  Using this API SWITCHES can send the success/failure response to card networks  As a result of processing this API, Core Banking Solution will Validate the account for available balance, statuses etc.., if all the validations are successful, then accounting entries will be posted.  __Transaction allowed__  * us-on-us:Single and multi currency * us-on-them:Single and multi currency * them-on-us:Single and multi currency  __Assumptions__  ATM cash withdrawal API scope is limited to Single Message System(SMS).", response = CashWithdrawalResponse.class, authorizations = {
			@Authorization(value = "Oauth2", scopes = {
 
			}) }, tags = { "ATM Cash Withdrawal", })
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "Cash Withdrawal Successful", response = CashWithdrawalResponse.class),
			@ApiResponse(code = 400, message = "Bad Request", response = Error.class),
			@ApiResponse(code = 401, message = "Access forbidden, invalid Authorization was used", response = Error.class),
			@ApiResponse(code = 403, message = "Forbidden", response = Error.class),
			@ApiResponse(code = 404, message = "Not Found", response = Error.class),
			@ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
	@RequestMapping(value = "atm/v1/withdrawals", produces = { "application/json" }, consumes = {
			"application/json" }, method = RequestMethod.POST)
	ResponseEntity<Object> atmCashWithdrawalPost(
			@ApiParam(value = "Format UUID - ID of the request, unique to the call, as determined by the initiating party", required = true) @RequestHeader(value = "X-Request-ID", required = true) UUID xRequestID,
			@ApiParam(value = "Cash Withdrawal Api", required = true) @Valid @RequestBody CashWithdrawalRequest cashWithdrawalRequest);
}
